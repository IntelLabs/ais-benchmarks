# Define the methods to be evaluated and its parameter configuration
methods:
    - name: m_pmc
      type: CMixturePMC
      debug: true
      params:
        K: 50         # Number of samples per proposal distribution
        N: 10          # Number of proposal distributions
        J: 1000       # Limit number of samples
        sigma: 0.01   # Scaling parameter of the spherical gaussian proposal distributions

    - name: rejection
      type: CRejectionSampling
      debug: true
      params:
        scaling: 1
        proposal: "'CMultivariateUniform({\"center\": np.zeros(self.ndims), \"radius\":(self.space_max-self.space_min) / 2})'"
        kde_bw: 0.01
        n_samples_kde: 100

    - name: HiDaisee_90
      type: CHiDaiseeSampling
      debug: false
      params:
        target_ess: 0.9
        n_min: 10
        tau: .01

    - name: TP_AISr_ESS90
      type: CTreePyramidSampling
      debug: true
      params:
        method: "'simple'"
        resampling: "'leaf'"
        kernel: "'haar'"
        ess_target: 0.90
        parallel_samples: 64

    - name: mcmc_mh
      type: CMetropolisHastings
      debug: true
      params:
        n_burnin: 10
        n_steps: 1
        proposal_sigma: 0.5 # Scaling parameter of the spherical gaussian MC proposal distribution
        kde_bw: 0.02
        n_samples_kde: 100

    - name: lais
      type: CLayeredAIS
      debug: true
      params:
        K: 3          # Number of samples per proposal distribution
        N: 5          # Number of proposal distributions
        J: 1000       # Limit number of samples
        L: 10         # Number of MCMC moves during the proposal adaptation
        sigma: 0.5    # Scaling parameter of the spherical gaussian proposal distributions
        mh_sigma: 0.5 # Scaling parameter of the mcmc proposal distributions moment update

    - name: dm_ais
      type: CDeterministicMixtureAIS
      debug: true
      params:
        K: 10         # Number of samples per proposal distribution
        N: 5          # Number of proposal distributions
        J: 1000       # Limit number of samples
        sigma: 0.5    # Scaling parameter of the spherical gaussian proposal distributions

    - name: multi_nested
      type: CMultiNestedSampling
      debug: false
      params:
        proposal: "'CMultivariateNormal({\"mean\": np.zeros(self.ndims), \"sigma\": np.diag(np.ones(self.ndims) * 0.01)})'"
        N: 20                     # Number of desired live points
        converged_radius: 0.01    # Radius of the sampling ellipsoid to consider the algo has converged
        kde_bw: 0.1
        n_samples_kde: 100
        inflate_factor: 1.1       # Inflate the ellipsoid fitted to the samples generated on one iteration
#
#    - name: nested
#      type: CNestedSampling
#      debug: true
#      params:
#        proposal: "'CMultivariateNormal({\"mean\": np.zeros(self.ndims), \"sigma\": np.diag(np.ones(self.ndims) * 0.01)})'"
#        N: 2          # Number of proposal distributions
#        kde_bw: 0.01
#        n_samples_kde: 100
#
