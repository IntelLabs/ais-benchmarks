# Define the target densities used for evaluation and label their categories and provide evaluation parameters
targets:
    - name: banana2D
      type: distributions.rare.banana2d.Banana2D
      params: {}
      space_size: 10.0
      batch_size: 2
      nsamples: 1000
      nsamples_eval: 2000
      domain_min: np.array([-10, -10])
      domain_max: np.array([10, 10])
      tags: [benchden, low_kurtosis, low_skew]

    - name: gmm
      type: distributions.CGaussianMixtureModel
      params: {means: [[0.0, 0.0], [-0.2, 0.4]],
               sigmas: [[0.01, 0.1], [0.001, 0.01]],  # WARNING!! Notice the double bracket when defining the sigmas
               weights:[0.5, 0.5],
               support:[[-1, -1], [1, 1]]}
      space_size: 1.0
      batch_size: 2
      nsamples: 200
      nsamples_eval: 2000
      domain_min: np.array([-1,-1])
      domain_max: np.array([1,1])
      tags: [high_kurtosis, low_skew, multimodal, close_modes]

    - name: gmm
      type: distributions.CGaussianMixtureModel
      params: {means: [[1.5], [-4.2]],
               sigmas: [[0.1], [0.01]],  # WARNING!! Notice the double bracket when defining the cov
               weights:[0.5, 0.5],
               support:[[-10, -10], [10, 10]]}
      space_size: 10.0
      batch_size: 2
      nsamples: 1000
      nsamples_eval: 2000
      domain_min: np.array([-10])
      domain_max: np.array([10])
      tags: [high_kurtosis, low_skew, multimodal, separate_modes, disjoint_support]

    - name: normal
      type: distributions.CMultivariateNormal
      params: {mean: [0.0], sigma: [[0.2]], support:[-5, 5]}  # WARNING!! Notice the double bracket when defining the cov
      space_size: 1.0
      batch_size: 2
      nsamples: 1000
      nsamples_eval: 2000
      domain_min: np.array([-1])
      domain_max: np.array([1])
      tags: [low_kurtosis, low_skew, unimodal]

# Number of times each experiment is repeated
nreps: 10

# Random seed used for reproducibility
rseed: 0

# Metrics computed
metrics: [NESS, JSD, T]

display:
    value: true             # Display 1D and 2D density plots on the screen
    display_path: results/  # If value is true, save the plots as a .png in the provided path

    animation: {value: true,                    # Compile the sequence of visualized sampling steps into an animation
                fps: 1,                         # Frames per second used for the animation
                animation_path: results/anim/}  # If value is true, save the plots as a .png in the provided path

output:
    file: results.txt
    make_plots: true
    plots_path: plot_results/