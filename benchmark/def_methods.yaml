# Define the methods to be evaluated and its parameter configuration
methods:
    - name: m_pmc
      type: sampling_methods.m_pmc.CMixturePMC
      params:
        K: 20         # Number of samples per proposal distribution
        N: 10          # Number of proposal distributions
        J: 1000       # Limit number of samples
        sigma: 0.01   # Scaling parameter of the spherical gaussian proposal distributions

    - name: mcmc_mh
      type: sampling_methods.metropolis_hastings.CMetropolisHastings
      params:
        n_burnin: 10
        n_steps: 2
        kde_bw: 0.01
        proposal_sigma: 0.01 # Scaling parameter of the spherical gaussian MC proposal distribution

    - name: rejection
      type: sampling_methods.rejection.CRejectionSampling
      params:
        scaling: 1
        proposal: "'distributions.CMultivariateUniform.CMultivariateUniform(np.zeros(self.ndims), (self.space_max-self.space_min) / 2)'"
        kde_bw: 0.01

    - name: lais
      type: sampling_methods.layered_ais.CLayeredAIS
      params:
        K: 3          # Number of samples per proposal distribution
        N: 5          # Number of proposal distributions
        J: 1000       # Limit number of samples
        L: 10         # Number of MCMC moves during the proposal adaptation
        sigma: 0.01   # Scaling parameter of the spherical gaussian proposal distributions
        mh_sigma: 0.005  # Scaling parameter of the mcmc proposal distributions moment update

    - name: dm_ais
      type: sampling_methods.dm_ais.CDeterministicMixtureAIS
      params:
        K: 10         # Number of samples per proposal distribution
        N: 2          # Number of proposal distributions
        J: 1000       # Limit number of samples
        sigma: 0.01   # Scaling parameter of the spherical gaussian proposal distributions

    - name: tp_mixture_leaf_haar
      type: sampling_methods.tree_pyramid.CTreePyramidSampling
      params:
        method: "'mixture'"
        resampling: "'leaf'"
        kernel: "'haar'"

    - name: tp_mixture_none_haar
      type: sampling_methods.tree_pyramid.CTreePyramidSampling
      params:
        method: "'mixture'"
        resampling: "'none'"
        kernel: "'haar'"

    - name: tp_simple_none_haar
      type: sampling_methods.tree_pyramid.CTreePyramidSampling
      params:
        method: "'simple'"
        resampling: "'none'"
        kernel: "'haar'"

    - name: tp_simple_leaf_haar
      type: sampling_methods.tree_pyramid.CTreePyramidSampling
      params:
        method: "'simple'"
        resampling: "'leaf'"
        kernel: "'haar'"

    - name: tp_dm_leaf_normal
      type: sampling_methods.tree_pyramid.CTreePyramidSampling
      params:
        method: "'dm'"
        resampling: "'leaf'"
        kernel: "'normal'"

    - name: nested
      type: sampling_methods.nested.CNestedSampling
      params:
        proposal: "'distributions.CMultivariateNormal.CMultivariateNormal(np.zeros(self.ndims), np.diag(np.ones(self.ndims) * 0.01))'"
        N: 2          # Number of proposal distributions
        kde_bw: 0.01

    - name: multi_nested
      type: sampling_methods.multi_nested.CMultiNestedSampling
      params:
        proposal: "'distributions.CMultivariateNormal.CMultivariateNormal(np.zeros(self.ndims), np.diag(np.ones(self.ndims) * 0.01))'"
        N: 2          # Number of proposal distributions
        kde_bw: 0.01

